package hier

model HierarchicalRockets {
  param GlobalDataSource data
  param String filter ?: ""
  param Plate<String> rocketTypes
  param Plated<IntVar> numberOfLaunches
  random Plated<RealVar> failureProbabilities
  random Plated<IntVar> numberOfFailures
  random RealVar m ?: latentReal, s ?: latentReal
  
  laws {
    m ~ ContinuousUniform(0, 1)
    s ~ Exponential(0.1)
    for (Index<String> rocketType : rocketTypes.indices.filter[key.startsWith(filter)]) {
      failureProbabilities.get(rocketType) | m, s ~ Beta(m*s, (1.0-m)*s)
      numberOfFailures.get(rocketType)
        | RealVar failureProbability = failureProbabilities.get(rocketType),
          IntVar numberOfLaunch = numberOfLaunches.get(rocketType)
        ~ Binomial(numberOfLaunch, failureProbability)
    }
  }
}